#!/usr/bin/env bash
#
# -*- Mode: sh; coding: utf-8; indent-tabs-mode: nil; tab-width: 2 -*-
# vim:set expandtab tabstop=2 fenc=utf-8 fileformat=unix filetype=sh:
#
# Entry point for all actions needed to finish installation of this
# dotfiles project.

# ARG_OPTIONAL_BOOLEAN([mokaicontheme],[m],[Switch installation of Moka icon themes (Linux only)])
# ARG_OPTIONAL_BOOLEAN([brewbundle],[b],[Install Homebrew packages (macOS only)])
# ARG_OPTIONAL_BOOLEAN([finder],[f],[Adjust Finder settings (macOS only))])
# ARGBASH_GO()
# needed because of  Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.9.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate


die() {
  local _ret="${2:-1}"
  test "${_PRINT_HELP:-no}" = yes && print_help >&2
  echo "$1" >&2
  exit "${_ret}"
}


begins_with_short_option() {
  local first_option all_short_options='pmbfh'
  first_option="${1:0:1}"
  test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_mokaicontheme="off"
_arg_brewbundle="off"
_arg_finder="on"

print_help() {
  man dotfiles_install 1
}


parse_commandline() {
  while test $# -gt 0; do
    _key="$1"
    case "$_key" in
      -m|--no-mokaicontheme|--mokaicontheme)
        _arg_mokaicontheme="on"
        test "${1:0:5}" = "--no-" && _arg_mokaicontheme="off"
        ;;
      -m*)
        _arg_mokaicontheme="on"
        _next="${_key##-m}"
        if test -n "$_next" -a "$_next" != "$_key"; then
          { begins_with_short_option "$_next" && shift && set -- "-m" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
        fi
        ;;
      -b|--no-brewbundle|--brewbundle)
        _arg_brewbundle="on"
        test "${1:0:5}" = "--no-" && _arg_brewbundle="off"
        ;;
      -b*)
        _arg_brewbundle="on"
        _next="${_key##-b}"
        if test -n "$_next" -a "$_next" != "$_key"; then
          { begins_with_short_option "$_next" && shift && set -- "-b" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
        fi
        ;;
      -f|--no-finder|--finder)
        _arg_finder="on"
        test "${1:0:5}" = "--no-" && _arg_finder="off"
        ;;
      -f*)
        _arg_finder="on"
        _next="${_key##-f}"
        if test -n "$_next" -a "$_next" != "$_key"; then
          { begins_with_short_option "$_next" && shift && set -- "-f" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
        fi
        ;;
      -h|--help)
        print_help
        exit 0
        ;;
      -h*)
        print_help
        exit 0
        ;;
      *)
        _PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
        ;;
      esac
    shift
  done
}

parse_commandline "$@"
### END OF CODE GENERATED BY Argbash (sortof) ### ])


# [ <-- needed because of Argbash

## Set dotfiles_dir to the directory containing the script
## The ${var%pattern} format will remove the shortest match of
## pattern from the end of the string. Here, it will remove the
## script's name,. leaving only the directory.
dotfiles_dir="${0%/*}"

source "$dotfiles_dir/dotfiles-install/moka_icon_theme.sh"
source "$dotfiles_dir/dotfiles-install/darwin_finder.sh"
source "$dotfiles_dir/dotfiles-install/darwin_brew_packages.sh"

dotfiles_install() {
  if [[ "$_arg_mokaicontheme" = "on" ]]; then
    dotfiles_install::moka_icon_theme
  else
    echo "[skip] Moka icon theme installation."
  fi
  if [[ "$_arg_brewbundle" = "on" ]]; then
    dotfiles_install::darwin_brew_packages
  else
    echo "[skip] Homebrew package installation."
  fi
  if [[ "$_arg_finder" = "on" ]]; then
    dotfiles_install::darwin_finder
  else
    echo "[skip] macOS Finder configuration."
  fi
}

dotfiles_install


# ] <-- needed because of Argbash
