.\" Automatically generated by Pandoc 3.1.10
.\"
.TH "maven_verify_multi_module" "1" "November 2021" "dreadwarrior" "dotfiles"
.SH NAME
\f[B]maven_verify_multi_module\f[R] \- Focused test execution of
specific modules in a Maven multi\-module project.
.SH SYNOPSIS
\f[B]\f[CB]maven_verify_multi_module\f[B]\f[R] [\f[CR]\-g\f[R]
(\f[CR]compile\f[R]|\f[CR]install\f[R])] [\f[CR]\-s\f[R]]
[\f[CR]\-h\f[R]] \f[I]target\-module(s)\f[R]
.SH DESCRIPTION
Running tests on a (complex) Maven multi\-module project for a
\f[B]specifc\f[R] target module can be time consuming.
This script helps to `compile' or `install' the dependencies for that
target module and runs the test of that target module afterwards.
.PP
This helper requires either a local Maven wrapper (mvnw) or a globally
installed Maven executable.
.SH OPTIONS
.TP
\f[CR]\-g\f[R] (\f[CR]compile\f[R]|\f[CR]install\f[R]), \f[CR]\-\-dependencies\-goal=\f[R](\f[CR]compile\f[R]|\f[CR]install\f[R])
Whether to execute the `compile' or `install' goal for the dependencies.
(defaults to \[lq]compile\[rq])
.TP
\f[CR]\-s\f[R], \f[CR]\-\-skip\-dependencies\-tests\f[R], \f[CR]\-\-no\-skip\-dependencies\-tests\f[R]
Whether to skip tests on dependencies build phase or not.
(defaults to \[lq]false\[rq])
.TP
\f[CR]\-h\f[R], \f[CR]\-\-help\f[R]
Prints help
.TP
\f[I]target\-module(s)\f[R]
The target module(s) for which the tests should be run for.
Comma\-separated if multiple modules should be targeted.
.SH EXIT STATUS
.TP
0
successful execution
.TP
1
error while parsing command line arguments
.TP
64
no valid Maven executable found
.SH EXAMPLES
If the multi\-module project requires to install the dependencies, use
the \f[B]\f[CB]\-g\f[B]\f[R] argument with the value set to
\[lq]install\[rq]:
.IP
.EX
$ maven_verify_multi_module \-g install my\-module\-name
.EE
.PP
To skip running tests of the target module(s) dependencies use the
\f[B]\f[CB]\-s\f[B]\f[R] flag:
.IP
.EX
$ maven_verify_multi_module \-s my\-module\-name
.EE
.PP
To run \f[B]MVVM\f[R] for multiple target modules, use a
comma\-separated list of module names:
.IP
.EX
$ maven_verify_multi_module mod1,mod2
.EE
.SH SEE ALSO
mvn(1)
