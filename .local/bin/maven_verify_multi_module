#!/usr/bin/env bash
#
# -*- Mode: sh; coding: utf-8; indent-tabs-mode: nil; tab-width: 2 -*-
# vim:set expandtab tabstop=2 fenc=utf-8 fileformat=unix filetype=sh:
#
# Run a lightweight verify goal on a (complex) Maven multi-module project.
#
# Based on question and answers of this tweet:
#
# https://twitter.com/gunnarmorling/status/1463792047316520965

# ARG_OPTIONAL_SINGLE([dependencies-goal],[g],[Whether to execute the compile or install goal for the dependencies.], [compile])
# ARG_OPTIONAL_BOOLEAN([skip-dependencies-tests],[s],[Whether to skip tests on dependencies build phase or not.], [])
# ARG_POSITIONAL_SINGLE([target-modules],[The target modules for which the tests should be run for.],[])
# ARG_HELP([The general script's help msg])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.9.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate

# Enabling trace
#set -x

_fmt_red=$(tput setaf 1)
_fmt_blue=$(tput setaf 4)
_fmt_normal=$(tput sgr0)

die() {
  local _ret="${2:-1}"
  test "${_PRINT_HELP:-no}" = yes && print_help >&2
  echo "$1" >&2
  exit "${_ret}"
}


begins_with_short_option() {
  local first_option all_short_options='csh'
  first_option="${1:0:1}"
  test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_dependencies_goal="compile"
_arg_skip_dependencies_tests="false"


print_help() {
  man $(dirname $0)/man/maven_verify_multi_module.1
}


parse_commandline() {
  _positionals_count=0
  while test $# -gt 0
  do
    _key="$1"
    case "$_key" in
      -g|--dependencies-goal)
        test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
        _arg_dependencies_goal="$2"
        shift
        ;;
      --dependencies-goal=*)
        _arg_dependencies_goal="${_key##--dependencies-goal=}"
        ;;
      -g*)
        _arg_dependencies_goal="${_key##-g}"
        ;;
      -s|--no-skip-dependencies-tests|--skip-dependencies-tests)
        _arg_skip_dependencies_tests="true"
        test "${1:0:5}" = "--no-" && _arg_skip_dependencies_tests="false"
        ;;
      -s*)
        _arg_skip_dependencies_tests="true"
        _next="${_key##-s}"
        if test -n "$_next" -a "$_next" != "$_key"
        then
          { begins_with_short_option "$_next" && shift && set -- "-s" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option." 1
        fi
        ;;
      -h|--help)
        print_help
        exit 0
        ;;
      -h*)
        print_help
        exit 0
        ;;
      *)
        _last_positional="$1"
        _positionals+=("$_last_positional")
        _positionals_count=$((_positionals_count + 1))
        ;;
    esac
    shift
  done
}


handle_passed_args_count() {
  local _required_args_string="'target-module'"
  test "${_positionals_count}" -ge 1 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 1 (namely: $_required_args_string), but got only ${_positionals_count}." 1
  test "${_positionals_count}" -le 1 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 1 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args() {
  local _positional_name _shift_for=$1
  _positional_names="_arg_target_module "

  shift "$_shift_for"
  for _positional_name in ${_positional_names}
  do
    test $# -gt 0 || break
    eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
    shift
  done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

_maven_command_global="mvn"
_maven_command_wrapper="./mvnw"
_maven_command=""

if type "$_maven_command_wrapper" &> /dev/null; then
  printf '%s\n' "[${_fmt_blue}INFO${_fmt_normal}] MVMM: Using local Maven wrapper."
  _maven_command="$_maven_command_wrapper"
elif type "$_maven_command_global" &> /dev/null; then
  printf '%s\n' "[${_fmt_blue}INFO${_fmt_normal}] MVMM: Using global Maven binary."
  _maven_command="$_maven_command_global"
else
  _PRINT_HELP=no die "[${_fmt_red}ERROR${_fmt_normal}] No Maven executable found." 64
fi

$_maven_command clean $_arg_dependencies_goal -DskipTests=$_arg_skip_dependencies_tests -pl :"$_arg_target_module" -am && \
$_maven_command clean verify -pl :"$_arg_target_module"

# ] <-- needed because of Argbash
